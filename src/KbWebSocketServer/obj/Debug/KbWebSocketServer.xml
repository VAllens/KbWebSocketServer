<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KbWebSocketServer</name>
    </assembly>
    <members>
        <member name="T:KbWebSocketServer.ObjectModels.WebSocketAcceptContext">
            <summary>
            WebSocket握手上下文。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.ObjectModels.WebSocketAcceptContext.#ctor(System.Net.Sockets.TcpClient,System.IO.Stream,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Func{KbWebSocketServer.ObjectModels.WebSocketAcceptContext,System.Object,System.Threading.Tasks.ValueTask{System.Net.WebSockets.WebSocket}},System.Object)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.ObjectModels.WebSocketAcceptContext.TcpClient">
            <summary>
            客户端的Tcp连接。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.ObjectModels.WebSocketAcceptContext.ClientStream">
            <summary>
            客户端连接的网络Stream。
            </summary>
            <remarks>
            如果需要服务器对网络Stream进行封装（比如使用SslStream或GZipStream裹住原始网络Stream，为数据传输添加Ssl或压缩功能），可以重新设置此属性的值。
            </remarks>
        </member>
        <member name="P:KbWebSocketServer.ObjectModels.WebSocketAcceptContext.RequestRawText">
            <summary>
            客户端请求的原始文本。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.ObjectModels.WebSocketAcceptContext.RequestHeaders">
            <summary>
            客户端请求的头信息。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.ObjectModels.WebSocketAcceptContext.ResponseStatusCode">
            <summary>
            返回给客户端的响应代码。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.ObjectModels.WebSocketAcceptContext.ResponseHeaders">
            <summary>
            返回给客户端的头信息。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.ObjectModels.WebSocketAcceptContext.AcceptWebSocketAsync">
            <summary>
            接受客户端的握手请求，返回与客户端建立的WebSocket连接。
            </summary>
        </member>
        <member name="T:KbWebSocketServer.WebSocketExtensions">
            <summary>
            为<see cref="T:System.Net.WebSockets.WebSocket"/>添加的扩展方法。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketExtensions.ReceiveMessagesAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
            <summary>
            接收消息。连接中断将使异步迭代器正常结束(而不会抛出任何异常)。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketExtensions.SendBinaryAsync(System.Net.WebSockets.WebSocket,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送一条完整的二进制消息。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketExtensions.SendBinaryAsync(System.Net.WebSockets.WebSocket,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            发送一条完整的二进制消息。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketExtensions.SendTextAsync(System.Net.WebSockets.WebSocket,System.String,System.Threading.CancellationToken)">
            <summary>
            发送一条完整的文本消息。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketExtensions.SendTextAsync(System.Net.WebSockets.WebSocket,System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <summary>
            发送一条完整的文本消息。
            </summary>
        </member>
        <member name="T:KbWebSocketServer.WebSocketMessage">
            <summary>
            一条WebSocket消息。消息类型可能是文本或二进制。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            构造一个二进制类型消息。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketMessage.#ctor(System.Char[],System.Int32)">
            <summary>
            构造一个文本类型消息。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.WebSocketMessage.MessageType">
            <summary>
            消息类型。二进制 or 文本。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.WebSocketMessage.Binary">
            <summary>
            消息包含的二进制内容（如果消息类型是二进制）。
            </summary>
            <remarks>
            支持此属性值的内存缓冲区将被自动回收重用，请勿将此属性的使用范围扩展到其他函数栈帧。
            如果确实需要，将此属性值复制一份使用。
            </remarks>
        </member>
        <member name="P:KbWebSocketServer.WebSocketMessage.Text">
            <summary>
            消息包含的文本内容（如果消息类型是文本）。
            </summary>
            <remarks>
            支持此属性值的内存缓冲区将被自动回收重用，请勿将此属性的使用范围扩展到其他函数栈帧。
            如果确实需要，将此属性值复制一份使用。
            </remarks>
        </member>
        <member name="T:KbWebSocketServer.WebSocketServer">
            <summary>
            WebSocket服务器。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.#ctor(System.Int32)">
            <summary>
            在当前所有可用IP地址的指定端口上初始化WebSocket服务器。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.#ctor(System.String,System.Int32)">
            <summary>
            在指定IP地址和端口上初始化WebSocket服务器。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            在指定IP地址和端口上初始化WebSocket服务器。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.WebSocketServer.HostIP">
            <summary>
            WebSocket服务器的宿主IP地址。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.WebSocketServer.HostPort">
            <summary>
            WebSocket服务器的宿主网络端口。
            </summary>
        </member>
        <member name="P:KbWebSocketServer.WebSocketServer.Active">
            <summary>
            是否已启动。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.Start(System.Func{KbWebSocketServer.ObjectModels.WebSocketAcceptContext,System.Threading.Tasks.ValueTask})">
            <summary>
            启动服务器，开始响应客户端请求。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.Stop">
            <summary>
            停止服务器。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.AcceptClients(System.Threading.CancellationToken)">
            <summary>
            接受客户端的连接请求。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.Handshake(System.Net.Sockets.TcpClient)">
            <summary>
            处理客户端的握手请求。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.SendHandshakeRejectResponse(System.IO.Stream,System.Net.HttpStatusCode,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            发送拒绝客户端握手的响应消息。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.SendHandshakeSuccessResponse(System.IO.Stream,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            发送客户端握手成功的响应消息（允许客户端握手）。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.GenerateSecWebSocketAccept(System.String)">
            <summary>
            解析Sec-WebSocket-Key，生成需要返回的Sec-WebSocket-Accept。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSocketServer.ParseRequestHeaders(System.String)">
            <summary>
            从HTTP请求文本解析所有主机头。
            </summary>
        </member>
        <member name="T:KbWebSocketServer.WebSocketServer.TcpListenerEx">
            <summary>
            这个子类的唯一作用是将原本protected属性Active(标识是否已开始监听)暴露出来。
            </summary>
        </member>
        <member name="T:KbWebSocketServer.WebSockets.ConnectedWebSocket">
            <summary>
            与客户端的WebSocket连接。
            </summary>
            <remarks>
            目前这个类没有任何自定义功能，它使用组合模式将真正实现功能的WebSocket类简单做了一个封装。
            使用此类的目的，是为未来的扩展性提供可能。
            </remarks>
        </member>
        <member name="M:KbWebSocketServer.WebSockets.ConnectedWebSocket.#ctor(KbWebSocketServer.WebSocketServer,System.Net.Sockets.TcpClient,System.IO.Stream,System.Net.WebSockets.WebSocket)">
            <summary>
            使用底层WebSocket对象初始化对象。
            </summary>
        </member>
        <member name="M:KbWebSocketServer.WebSockets.ConnectedWebSocket.Abort">
            <inheritdoc />
        </member>
        <member name="M:KbWebSocketServer.WebSockets.ConnectedWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:KbWebSocketServer.WebSockets.ConnectedWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:KbWebSocketServer.WebSockets.ConnectedWebSocket.Dispose">
            <inheritdoc />
        </member>
        <member name="M:KbWebSocketServer.WebSockets.ConnectedWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:KbWebSocketServer.WebSockets.ConnectedWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:KbWebSocketServer.WebSockets.ConnectedWebSocket.CloseStatus">
            <inheritdoc />
        </member>
        <member name="P:KbWebSocketServer.WebSockets.ConnectedWebSocket.CloseStatusDescription">
            <inheritdoc />
        </member>
        <member name="P:KbWebSocketServer.WebSockets.ConnectedWebSocket.State">
            <inheritdoc />
        </member>
        <member name="P:KbWebSocketServer.WebSockets.ConnectedWebSocket.SubProtocol">
            <inheritdoc />
        </member>
        <member name="M:KbWebSocketServer.WebSockets.WebSocketReceiveMessagesAsyncExtension.ReceiveMessagesAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
            <summary>
            接收消息。使用 await foreach 处理返回的异步集合。
            </summary>
            <remarks>
            如果连接意外中断，异步集合将正常结束而不会抛出异常。
            </remarks>
        </member>
        <member name="M:KbWebSocketServer.WebSockets.WebSocketReceiveMessagesAsyncExtension.GrowBuffer``1(``0[],System.Int32)">
            <summary>
            按需增大缓冲区，返回增大后的新缓冲区。
            </summary>
            <param name="buffer">旧的缓冲区。</param>
            <param name="usedSize">旧的缓冲区中已经用了多少。</param>
        </member>
    </members>
</doc>
